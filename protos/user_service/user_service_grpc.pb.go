// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/user_service/user_service.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUserById(ctx context.Context, in *UserPrimaryKey, opts ...grpc.CallOption) (*User, error)
	GetSum(ctx context.Context, in *Variable, opts ...grpc.CallOption) (*Var, error)
	GetMax(ctx context.Context, in *Array, opts ...grpc.CallOption) (*Arr, error)
	GetDiv(ctx context.Context, in *Variable, opts ...grpc.CallOption) (*Var, error)
	GetMult(ctx context.Context, in *Variable, opts ...grpc.CallOption) (*Var, error)
	GetSub(ctx context.Context, in *Variable, opts ...grpc.CallOption) (*Var, error)
	GetSqrt(ctx context.Context, in *Sqrt, opts ...grpc.CallOption) (*Var2, error)
	GetPow(ctx context.Context, in *Variable, opts ...grpc.CallOption) (*Var, error)
	GetMin(ctx context.Context, in *Array, opts ...grpc.CallOption) (*Arr, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserById(ctx context.Context, in *UserPrimaryKey, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user_service.UserService/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSum(ctx context.Context, in *Variable, opts ...grpc.CallOption) (*Var, error) {
	out := new(Var)
	err := c.cc.Invoke(ctx, "/user_service.UserService/GetSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMax(ctx context.Context, in *Array, opts ...grpc.CallOption) (*Arr, error) {
	out := new(Arr)
	err := c.cc.Invoke(ctx, "/user_service.UserService/GetMax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetDiv(ctx context.Context, in *Variable, opts ...grpc.CallOption) (*Var, error) {
	out := new(Var)
	err := c.cc.Invoke(ctx, "/user_service.UserService/GetDiv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMult(ctx context.Context, in *Variable, opts ...grpc.CallOption) (*Var, error) {
	out := new(Var)
	err := c.cc.Invoke(ctx, "/user_service.UserService/GetMult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSub(ctx context.Context, in *Variable, opts ...grpc.CallOption) (*Var, error) {
	out := new(Var)
	err := c.cc.Invoke(ctx, "/user_service.UserService/GetSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSqrt(ctx context.Context, in *Sqrt, opts ...grpc.CallOption) (*Var2, error) {
	out := new(Var2)
	err := c.cc.Invoke(ctx, "/user_service.UserService/GetSqrt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetPow(ctx context.Context, in *Variable, opts ...grpc.CallOption) (*Var, error) {
	out := new(Var)
	err := c.cc.Invoke(ctx, "/user_service.UserService/GetPow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMin(ctx context.Context, in *Array, opts ...grpc.CallOption) (*Arr, error) {
	out := new(Arr)
	err := c.cc.Invoke(ctx, "/user_service.UserService/GetMin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUserById(context.Context, *UserPrimaryKey) (*User, error)
	GetSum(context.Context, *Variable) (*Var, error)
	GetMax(context.Context, *Array) (*Arr, error)
	GetDiv(context.Context, *Variable) (*Var, error)
	GetMult(context.Context, *Variable) (*Var, error)
	GetSub(context.Context, *Variable) (*Var, error)
	GetSqrt(context.Context, *Sqrt) (*Var2, error)
	GetPow(context.Context, *Variable) (*Var, error)
	GetMin(context.Context, *Array) (*Arr, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUserById(context.Context, *UserPrimaryKey) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServiceServer) GetSum(context.Context, *Variable) (*Var, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSum not implemented")
}
func (UnimplementedUserServiceServer) GetMax(context.Context, *Array) (*Arr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMax not implemented")
}
func (UnimplementedUserServiceServer) GetDiv(context.Context, *Variable) (*Var, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiv not implemented")
}
func (UnimplementedUserServiceServer) GetMult(context.Context, *Variable) (*Var, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMult not implemented")
}
func (UnimplementedUserServiceServer) GetSub(context.Context, *Variable) (*Var, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSub not implemented")
}
func (UnimplementedUserServiceServer) GetSqrt(context.Context, *Sqrt) (*Var2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSqrt not implemented")
}
func (UnimplementedUserServiceServer) GetPow(context.Context, *Variable) (*Var, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPow not implemented")
}
func (UnimplementedUserServiceServer) GetMin(context.Context, *Array) (*Arr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMin not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserById(ctx, req.(*UserPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Variable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/GetSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSum(ctx, req.(*Variable))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Array)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/GetMax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMax(ctx, req.(*Array))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetDiv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Variable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetDiv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/GetDiv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetDiv(ctx, req.(*Variable))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Variable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/GetMult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMult(ctx, req.(*Variable))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Variable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/GetSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSub(ctx, req.(*Variable))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSqrt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sqrt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSqrt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/GetSqrt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSqrt(ctx, req.(*Sqrt))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetPow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Variable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetPow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/GetPow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetPow(ctx, req.(*Variable))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Array)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/GetMin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMin(ctx, req.(*Array))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserById",
			Handler:    _UserService_GetUserById_Handler,
		},
		{
			MethodName: "GetSum",
			Handler:    _UserService_GetSum_Handler,
		},
		{
			MethodName: "GetMax",
			Handler:    _UserService_GetMax_Handler,
		},
		{
			MethodName: "GetDiv",
			Handler:    _UserService_GetDiv_Handler,
		},
		{
			MethodName: "GetMult",
			Handler:    _UserService_GetMult_Handler,
		},
		{
			MethodName: "GetSub",
			Handler:    _UserService_GetSub_Handler,
		},
		{
			MethodName: "GetSqrt",
			Handler:    _UserService_GetSqrt_Handler,
		},
		{
			MethodName: "GetPow",
			Handler:    _UserService_GetPow_Handler,
		},
		{
			MethodName: "GetMin",
			Handler:    _UserService_GetMin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/user_service/user_service.proto",
}
