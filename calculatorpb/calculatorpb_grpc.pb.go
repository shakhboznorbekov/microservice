// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: calculatorpb/calculatorpb.proto

package calculatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	PrimeNumberDecompition(ctx context.Context, in *PrimeNumberDecompitionRequest, opts ...grpc.CallOption) (CalculatorService_PrimeNumberDecompitionClient, error)
	ComputeAvarage(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeAvarageClient, error)
	FindMaximum(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_FindMaximumClient, error)
}

type calculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorServiceClient(cc grpc.ClientConnInterface) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorService/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) PrimeNumberDecompition(ctx context.Context, in *PrimeNumberDecompitionRequest, opts ...grpc.CallOption) (CalculatorService_PrimeNumberDecompitionClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[0], "/calculator.CalculatorService/PrimeNumberDecompition", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServicePrimeNumberDecompitionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_PrimeNumberDecompitionClient interface {
	Recv() (*PrimeNumberDecompitionResponse, error)
	grpc.ClientStream
}

type calculatorServicePrimeNumberDecompitionClient struct {
	grpc.ClientStream
}

func (x *calculatorServicePrimeNumberDecompitionClient) Recv() (*PrimeNumberDecompitionResponse, error) {
	m := new(PrimeNumberDecompitionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) ComputeAvarage(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeAvarageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[1], "/calculator.CalculatorService/ComputeAvarage", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceComputeAvarageClient{stream}
	return x, nil
}

type CalculatorService_ComputeAvarageClient interface {
	Send(*ComputeAvarageRequest) error
	CloseAndRecv() (*ComputeAvarageResponse, error)
	grpc.ClientStream
}

type calculatorServiceComputeAvarageClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceComputeAvarageClient) Send(m *ComputeAvarageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceComputeAvarageClient) CloseAndRecv() (*ComputeAvarageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ComputeAvarageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) FindMaximum(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_FindMaximumClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[2], "/calculator.CalculatorService/FindMaximum", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceFindMaximumClient{stream}
	return x, nil
}

type CalculatorService_FindMaximumClient interface {
	Send(*FindMaximumRequest) error
	Recv() (*FindMaximumResponse, error)
	grpc.ClientStream
}

type calculatorServiceFindMaximumClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceFindMaximumClient) Send(m *FindMaximumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceFindMaximumClient) Recv() (*FindMaximumResponse, error) {
	m := new(FindMaximumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
// All implementations must embed UnimplementedCalculatorServiceServer
// for forward compatibility
type CalculatorServiceServer interface {
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	PrimeNumberDecompition(*PrimeNumberDecompitionRequest, CalculatorService_PrimeNumberDecompitionServer) error
	ComputeAvarage(CalculatorService_ComputeAvarageServer) error
	FindMaximum(CalculatorService_FindMaximumServer) error
	mustEmbedUnimplementedCalculatorServiceServer()
}

// UnimplementedCalculatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (UnimplementedCalculatorServiceServer) Sum(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedCalculatorServiceServer) PrimeNumberDecompition(*PrimeNumberDecompitionRequest, CalculatorService_PrimeNumberDecompitionServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeNumberDecompition not implemented")
}
func (UnimplementedCalculatorServiceServer) ComputeAvarage(CalculatorService_ComputeAvarageServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputeAvarage not implemented")
}
func (UnimplementedCalculatorServiceServer) FindMaximum(CalculatorService_FindMaximumServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMaximum not implemented")
}
func (UnimplementedCalculatorServiceServer) mustEmbedUnimplementedCalculatorServiceServer() {}

// UnsafeCalculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServiceServer will
// result in compilation errors.
type UnsafeCalculatorServiceServer interface {
	mustEmbedUnimplementedCalculatorServiceServer()
}

func RegisterCalculatorServiceServer(s grpc.ServiceRegistrar, srv CalculatorServiceServer) {
	s.RegisterService(&CalculatorService_ServiceDesc, srv)
}

func _CalculatorService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_PrimeNumberDecompition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeNumberDecompitionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).PrimeNumberDecompition(m, &calculatorServicePrimeNumberDecompitionServer{stream})
}

type CalculatorService_PrimeNumberDecompitionServer interface {
	Send(*PrimeNumberDecompitionResponse) error
	grpc.ServerStream
}

type calculatorServicePrimeNumberDecompitionServer struct {
	grpc.ServerStream
}

func (x *calculatorServicePrimeNumberDecompitionServer) Send(m *PrimeNumberDecompitionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_ComputeAvarage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).ComputeAvarage(&calculatorServiceComputeAvarageServer{stream})
}

type CalculatorService_ComputeAvarageServer interface {
	SendAndClose(*ComputeAvarageResponse) error
	Recv() (*ComputeAvarageRequest, error)
	grpc.ServerStream
}

type calculatorServiceComputeAvarageServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceComputeAvarageServer) SendAndClose(m *ComputeAvarageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceComputeAvarageServer) Recv() (*ComputeAvarageRequest, error) {
	m := new(ComputeAvarageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_FindMaximum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).FindMaximum(&calculatorServiceFindMaximumServer{stream})
}

type CalculatorService_FindMaximumServer interface {
	Send(*FindMaximumResponse) error
	Recv() (*FindMaximumRequest, error)
	grpc.ServerStream
}

type calculatorServiceFindMaximumServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceFindMaximumServer) Send(m *FindMaximumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceFindMaximumServer) Recv() (*FindMaximumRequest, error) {
	m := new(FindMaximumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorService_ServiceDesc is the grpc.ServiceDesc for CalculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _CalculatorService_Sum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeNumberDecompition",
			Handler:       _CalculatorService_PrimeNumberDecompition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ComputeAvarage",
			Handler:       _CalculatorService_ComputeAvarage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindMaximum",
			Handler:       _CalculatorService_FindMaximum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculatorpb/calculatorpb.proto",
}
